document_id=document_id,
user_id=user_id,
allocation_date=as.character(Sys.Date()),
allocation_type="testing",
allocated_by="assign_trainingset",
status="NEW")
}
}
assign_trainingset(con, 1)
con<-evdb_connect(password_method = "config")
assign_trainingset(con, 1)
get_allocation(1)
get_allocation(con, user_id=1)
user_trainingset_items <- function(con=connect, user_id, trainingset=define_trainingset(), not_allocated=FALSE){
#' Returns the elements of the training set the user has allocated to them (if not_allocated=TRUE the function returns the items they do not have allocated to them).
#' @param con The database connection to check.
#' @param user_id The userid to check in the database.
#' @param trainingset The trainingset of documents to check.
#' @param not_allocated If FALSE (default) returns the items allocated to the user, if TRUE returns items NOT allocated to the user.
#' @return the documents ids allocated in the training set
#'
#'
user_allocation <- get_allocation(con, user_id)
training_allocation <- dplyr::filter(user_allocation, allocation_type=="training")
doc_ids <- trainingset[trainingset %in% user_allocation$document_id] # document ids which are in training set but not allocated to the user
doc_ids_needed<-trainingset[!trainingset %in% user_allocation$document_id] # document ids which are in training set but not allocated to the user
not_allocated_as_training<-trainingset[!trainingset %in% training_allocation$document_id] # document ids which are in training set but not allocated to the user as allocation_type=="training"
if (not_allocated){
res<-doc_ids_needed
} else {
res<-doc_ids
}
res
}
user_trainingset_items()
user_trainingset_items(con, 1)
con<-evdb_connect(password_method = "config")
user_trainingset_items(con, 1)
user_trainingset_items(con, 1, not_allocated = TRUE)
length(user_trainingset_items(con, 1, not_allocated = TRUE)
)
length(user_trainingset_items(con, 1, not_allocated = F)
)
library(durhamevp)
library(durhamevp)
assign_trainingset_to_user <- function(con, userid, trainingset=define_trainingset(),
allocation_type="training", allocated_by="assign_trainingset_to_user"){
assign_set(con=con, user_id=user_id, set=trainingset, allocation_type=allocation_type, allocated_by=allocated_by)
}
assign_testset_to_user<-function(con, user_id, testset=define_testset(), allocation_type="testing", allocated_by="assign_testset_to_user") {
assign_set(con=con, user_id=user_id, set=testset, allocation_type=allocation_type, allocated_by=allocated_by)
}
assign_trainingset_to_user(con, 1)
assign_set <- function(con, user_id, set, allocation_type, allocated_by = "assign_set", status="NEW"){
#' Assigns a whole set of articles to a user (articles which are already allocated to a user are not allocated again).
#' @param con The connection to the election violence database.
#' @param user_id The user id.
#' @param set A vector which contains the document ids of the articles to be allocated (generally the test set of articles and the training set of articles).
#' @param allocation_type The type of the allocation in the database (one of testing, training, coding, checking and ideal)
#' @param allocated_by The person (user_id) or the function which performed the allocation
# restrict assignment of set to items not already allocated to the user
items_needed <- user_allocated_fromset(con, user_id, set=set, not_allocated = TRUE)
for (document_id in items_needed){
assign_article_to_user(con,
document_id=document_id,
user_id=user_id,
allocation_date=as.character(Sys.Date()),
allocation_type=allocation_type,
allocated_by=allocated_by,
status=status)
}
}
assign_testset_to_user<-function(con, user_id, testset=define_testset(), allocation_type="testing", allocated_by="assign_testset_to_user") {
assign_set(con=con, user_id=user_id, set=testset, allocation_type=allocation_type, allocated_by=allocated_by)
}
assign_trainingset_to_user <- function(con, userid, trainingset=define_trainingset(),
allocation_type="training", allocated_by="assign_trainingset_to_user"){
assign_set(con=con, user_id=user_id, set=trainingset, allocation_type=allocation_type, allocated_by=allocated_by)
}
assign_trainingset_to_user(con, 1)
assign_testset_to_user(con, 1)
con
con<-evdb_connect(password_method = "config")
assign_testset_to_user(con, 1)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(durhamevp)
## also using tidyverse functions
library(tidyverse)
con <- evdb_connect()
con <- evdb_connect(password_method="config")
alloc_1 <- get_allocation(con, user_id = 1)
alloc_1 %>%
dplyr::select(user_id, document_id, allocation_type, allocation_date)
alloc_1
this_sql <- "DELETE * FROM portal_user_documentallocations WHERE allocated_by='assign_testset_to_user' AND user_id=1"
dbSendStatement(con, this_sql)
this_sql <- "DELETE * FROM portal_user_documentallocations WHERE allocated_by='assign_testset_to_user' AND user_id=1 ;"
dbSendStatement(con, this_sql)
con<-evdb_connect(password_method = "config")
this_sql <- "DELETE * FROM portal_user_documentallocations WHERE allocated_by='assign_testset_to_user' AND user_id=1 ;"
dbSendStatement(con, this_sql)
this_sql <- "DELETE FROM portal_user_documentallocations WHERE allocated_by='assign_testset_to_user' AND user_id=1 ;"
dbSendStatement(con, this_sql)
this_sql <- "DELETE FROM portal_user_documentallocation WHERE allocated_by='assign_testset_to_user' AND user_id=1 ;"
dbSendStatement(con, this_sql)
this_sql <- "DELETE FROM portal_userdocumentallocation WHERE allocated_by='assign_testset_to_user' AND user_id=1 ;"
dbSendStatement(con, this_sql)
this_sql <- "DELETE FROM portal_userdocumentallocation WHERE allocated_by='assign_trainingset_to_user' AND user_id=1 ;"
dbSendStatement(con, this_sql)
get_allocation(con, 1)
this_sql <- "DELETE FROM portal_userdocumentallocation WHERE allocated_by='assign_trainingset' AND user_id=1 ;"
dbSendStatement(con, this_sql)
assign_testset_to_user<-function(con, user_id, testset=define_testset(), allocation_type="testing", allocated_by="assign_testset_to_user") {
assign_set(con=con, user_id=user_id, set=testset, allocation_type=allocation_type, allocated_by=allocated_by)
}
assign_trainingset_to_user <- function(con, userid, trainingset=define_trainingset(),
allocation_type="training", allocated_by="assign_trainingset_to_user"){
assign_set(con=con, user_id=user_id, set=trainingset, allocation_type=allocation_type, allocated_by=allocated_by)
}
library(durhamevp)
assign_testset_to_user(con, 1)
con<-evdb_connect(password_method = "config")
assign_testset_to_user(con, 1)
assign_set <- function(con, user_id, set, allocation_type, allocated_by = "assign_set", status="NEW"){
#' Assigns a whole set of articles to a user (articles which are already allocated to a user are not allocated again).
#' @param con The connection to the election violence database.
#' @param user_id The user id.
#' @param set A vector which contains the document ids of the articles to be allocated (generally the test set of articles and the training set of articles).
#' @param allocation_type The type of the allocation in the database (one of testing, training, coding, checking and ideal)
#' @param allocated_by The person (user_id) or the function which performed the allocation
# restrict assignment of set to items not already allocated to the user
items_needed <- user_allocated_fromset(con, user_id, set=set, not_allocated = TRUE)
for (document_id in items_needed){
assign_article_to_user(con,
document_id=document_id,
user_id=user_id,
allocation_date=as.character(Sys.Date()),
allocation_type=allocation_type,
allocated_by=allocated_by,
status=status)
}
"completed"
}
assign_testset_to_user(con, 2)
assign_trainingset_to_user(con, 2)
assign_trainingset_to_user <- function(con, user_id, trainingset=define_trainingset(),
allocation_type="training", allocated_by="assign_trainingset_to_user"){
assign_set(con=con, user_id=user_id, set=trainingset, allocation_type=allocation_type, allocated_by=allocated_by)
}
assign_trainingset_to_user(con, 2)
?dbSendQuery
get_users <- function(con, user_id){
#' Assigns a whole set of articles to a user (articles which are already allocated to a user are not allocated again).
#' @param con The connection to the election violence database.
#' @param user_id The user id.
this_sql<-"SELECT * FROM portal_users WHERE user_id=?user_id ;"
this_safe_sql<-DBI::sqlInterpolate(DBI::ANSI(), this_sql, user_id=user_id)
users<-DBI::dbGetQuery(con, this_safe_sql)
users
}
get_users(con, 1)
this_sql<-"SELECT * FROM portal_Users WHERE user_id=?user_id ;"
this_safe_sql<-DBI::sqlInterpolate(DBI::ANSI(), this_sql, user_id=user_id)
users<-DBI::dbGetQuery(con, this_safe_sql)
get_users <- function(con, user_id){
#' Assigns a whole set of articles to a user (articles which are already allocated to a user are not allocated again).
#' @param con The connection to the election violence database.
#' @param user_id The user id.
this_sql<-"SELECT * FROM portal_Users WHERE user_id=?user_id ;"
this_safe_sql<-DBI::sqlInterpolate(DBI::ANSI(), this_sql, user_id=user_id)
users<-DBI::dbGetQuery(con, this_safe_sql)
users
}
get_users(con, 1)
dbListTables(con)
this_sql<-"SELECT * FROM auth_users WHERE id=?user_id ;"
this_safe_sql<-DBI::sqlInterpolate(DBI::ANSI(), this_sql, user_id=user_id)
get_users <- function(con, user_id){
#' Assigns a whole set of articles to a user (articles which are already allocated to a user are not allocated again).
#' @param con The connection to the election violence database.
#' @param user_id The user id.
this_sql<-"SELECT * FROM auth_users WHERE id=?user_id ;"
this_safe_sql<-DBI::sqlInterpolate(DBI::ANSI(), this_sql, user_id=user_id)
users<-DBI::dbGetQuery(con, this_safe_sql)
users
}
get_users(con, 1)
get_users <- function(con, user_id){
#' Assigns a whole set of articles to a user (articles which are already allocated to a user are not allocated again).
#' @param con The connection to the election violence database.
#' @param user_id The user id.
this_sql<-"SELECT * FROM auth_user WHERE id=?user_id ;"
this_safe_sql<-DBI::sqlInterpolate(DBI::ANSI(), this_sql, user_id=user_id)
users<-DBI::dbGetQuery(con, this_safe_sql)
users
}
get_users(con, 1)
get_users(con, 2)
get_users(con, 3)
evdb_connect <- function(host="coders.victorianelectionviolence.uk", user="data_writer", dbname="evp", port=3306, password_method="ask"){
#' Set connection to election violence database
#'
#' @param host Location of database host.
#' @param user Username for accessing the database.
#' @param dbname Name of database.
#' @param port Value of port connection.
#' @param password_method Method of obtaining database password for specified user.
#' @return The connection to the database.
#' @export
#' @examples
#' # for default connection to the database
#' con <- evdb_connect()
#' # using alternative method of entering password information
#' con <- evbd_connect(password_method="config")
if (password_method=="keyring"){
password <- keyring::key_get(dbname)
} else if (password_method=="config"){
password<-config::get()$datawarehouse$pwd
} else{
password<- rstudioapi::askForPassword("Database password")
}
DBI::dbConnect(RMySQL::MySQL(),
host = host,
user = user,
port=port,
password = password,
dbname=dbname
)
}
con<-evdb_connect(password_method = "config")
get_users <- function(con, user_id){
#' Assigns a whole set of articles to a user (articles which are already allocated to a user are not allocated again).
#' @param con The connection to the election violence database.
#' @param user_id The user id.
this_sql<-"SELECT * FROM auth_user WHERE id=?user_id ;"
this_safe_sql<-DBI::sqlInterpolate(DBI::ANSI(), this_sql, user_id=user_id)
users<-DBI::dbGetQuery(con, this_safe_sql)
users
}
get_users(con, 3)
assign_testset_to_user(con, 3)
assign_trainingset_to_user(con, 2)
this_sql <- "DELETE FROM portal_userdocumentallocation WHERE allocated_by='assign_testset_to_user' AND user_id=1 ;"
#this_sql <- "DELETE FROM portal_userdocumentallocation WHERE allocated_by='assign_trainingset_to_user' AND user_id=1 ;"
dbSendStatement(con, this_sql)
assign_article_to_user <- function (con, document_id, user_id, allocation_date, allocation_type, allocated_by, status, coding_complete=0){
#' Assigns an article to a user.
#'
#' @param con The database connection to the election violence database.
#' @param document_id Id of the document to be assigned.
#' @param user_id Id of the user the document is to be assigned to.
#' @param allocation_date Date allocation made (usually today).
#' @param allocation_type Type of allocation (training, testing, coding, checking, ideal).
#' @param status Status of document coding (generally 'New' for newly assigned documents).
#'
allocated_at <- as.character(Sys.time())
this_sql<-"INSERT INTO portal_userdocumentallocation (document_id, user_id, allocation_date, allocation_type, allocated_by, status, coding_complete, article_type, geo_relevant, time_relevant, electoral_nature, violent_nature, violent_focus, legibility, comment, recommend_qualitative, difficulty_ranking, ideal_coding_comments, score, assigned_at, last_updated) VALUES (?document_id, ?user_id, ?allocation_date, ?allocation_type, ?allocated_by, ?status, ?coding_complete, '' , '', '', '', '', '', '', '', '', -1, '', -1, ?allocated_at, ?allocated_at) ;"
this_safe_sql<-DBI::sqlInterpolate(DBI::ANSI(), this_sql,
document_id=document_id,
user_id=user_id,
allocation_date=allocation_date,
allocation_type=allocation_type,
allocated_by=allocated_by,
status=status,
coding_complete=coding_complete,
allocated_at=allocated_at)
dbSendStatement(con, this_safe_sql)
return(NULL)
}
assign_set <- function(con, user_id, set, allocation_type, allocated_by = "assign_set", status="NEW"){
#' Assigns a whole set of articles to a user (articles which are already allocated to a user are not allocated again).
#' @param con The connection to the election violence database.
#' @param user_id The user id.
#' @param set A vector which contains the document ids of the articles to be allocated (generally the test set of articles and the training set of articles).
#' @param allocation_type The type of the allocation in the database (one of testing, training, coding, checking and ideal)
#' @param allocated_by The person (user_id) or the function which performed the allocation
# restrict assignment of set to items not already allocated to the user
items_needed <- user_allocated_fromset(con, user_id, set=set, not_allocated = TRUE)
for (document_id in items_needed){
assign_article_to_user(con,
document_id=document_id,
user_id=user_id,
allocation_date=as.character(Sys.Date()),
allocation_type=allocation_type,
allocated_by=allocated_by,
status=status)
}
"completed"
}
assign_testset_to_user<-function(con, user_id, testset=define_testset(), allocation_type="testing", allocated_by="assign_testset_to_user") {
assign_set(con=con, user_id=user_id, set=testset, allocation_type=allocation_type, allocated_by=allocated_by)
}
assign_trainingset_to_user <- function(con, user_id, trainingset=define_trainingset(),
allocation_type="training", allocated_by="assign_trainingset_to_user"){
assign_set(con=con, user_id=user_id, set=trainingset, allocation_type=allocation_type, allocated_by=allocated_by)
}
get_users <- function(con, user_id){
#' Assigns a whole set of articles to a user (articles which are already allocated to a user are not allocated again).
#' @param con The connection to the election violence database.
#' @param user_id The user id.
this_sql<-"SELECT * FROM auth_user WHERE id=?user_id ;"
this_safe_sql<-DBI::sqlInterpolate(DBI::ANSI(), this_sql, user_id=user_id)
users<-DBI::dbGetQuery(con, this_safe_sql)
users
}
assign_testset_to_user(con, 3)
assign_trainingset_to_user(con, 3)
library(durhamevp)
library(durhamevp)
?usellocated_fromset
?userallocated_fromset
?user_allocated_fromset
library(durhamevp)
?user_allocated_fromset
assign_set <- function(con, user_id, set, allocation_type, allocated_by = "assign_set", status="NEW"){
#' Assigns a whole set of articles to a user (articles which are already allocated to a user are not allocated again).
#' @param con The connection to the election violence database.
#' @param user_id The user id.
#' @param set A vector which contains the document ids of the articles to be allocated (generally the test set of articles and the training set of articles).
#' @param allocation_type The type of the allocation in the database (one of testing, training, coding, checking and ideal)
#' @param allocated_by The person (user_id) or the function which performed the allocation
# restrict assignment of set to items not already allocated to the user
items_needed <- user_allocated_fromset(con, user_id, set=set, not_allocated = TRUE)
if(length(items_needed)<length(set)){
warning_string <- paste0("In allocation by ", allocated_by, ": user_id ", user_id, "already allocated ", length(set)-length(items_needed), " items (of ", length(set), ").")
}
for (document_id in items_needed){
assign_article_to_user(con,
document_id=document_id,
user_id=user_id,
allocation_date=as.character(Sys.Date()),
allocation_type=allocation_type,
allocated_by=allocated_by,
status=status)
}
"completed"
}
assign_testset_to_user<-function(con, user_id, testset=define_testset(), allocation_type="testing", allocated_by="assign_testset_to_user") {
assign_set(con=con, user_id=user_id, set=testset, allocation_type=allocation_type, allocated_by=allocated_by)
}
assign_trainingset_to_user <- function(con, user_id, trainingset=define_trainingset(),
allocation_type="training", allocated_by="assign_trainingset_to_user"){
assign_set(con=con, user_id=user_id, set=trainingset, allocation_type=allocation_type, allocated_by=allocated_by)
}
assign_testset_to_user(con, 3)
con<-evdb_connect(password_method = "config")
assign_testset_to_user(con, 3)
assign_trainingset_to_user(con, 3)
assign_testset_to_user(con, 3)
get_allocation(con, 3)
warnings()
assign_set <- function(con, user_id, set, allocation_type, allocated_by = "assign_set", status="NEW"){
#' Assigns a whole set of articles to a user (articles which are already allocated to a user are not allocated again).
#' @param con The connection to the election violence database.
#' @param user_id The user id.
#' @param set A vector which contains the document ids of the articles to be allocated (generally the test set of articles and the training set of articles).
#' @param allocation_type The type of the allocation in the database (one of testing, training, coding, checking and ideal)
#' @param allocated_by The person (user_id) or the function which performed the allocation
# restrict assignment of set to items not already allocated to the user
items_needed <- user_allocated_fromset(con, user_id, set=set, not_allocated = TRUE)
if(length(items_needed)<length(set)){
warning_string <- paste0("In allocation by ", allocated_by, ": user_id ", user_id, "already allocated ", length(set)-length(items_needed), " items (of ", length(set), ").")
warning(warning_string)
}
for (document_id in items_needed){
assign_article_to_user(con,
document_id=document_id,
user_id=user_id,
allocation_date=as.character(Sys.Date()),
allocation_type=allocation_type,
allocated_by=allocated_by,
status=status)
}
"completed"
}
assign_testset_to_user(con, 3)
assign_set <- function(con, user_id, set, allocation_type, allocated_by = "assign_set", status="NEW"){
#' Assigns a whole set of articles to a user (articles which are already allocated to a user are not allocated again).
#' @param con The connection to the election violence database.
#' @param user_id The user id.
#' @param set A vector which contains the document ids of the articles to be allocated (generally the test set of articles and the training set of articles).
#' @param allocation_type The type of the allocation in the database (one of testing, training, coding, checking and ideal)
#' @param allocated_by The person (user_id) or the function which performed the allocation
# restrict assignment of set to items not already allocated to the user
items_needed <- user_allocated_fromset(con, user_id, set=set, not_allocated = TRUE)
if(length(items_needed)<length(set)){
warning_string <- paste0("In allocation by ", allocated_by, ": user_id ", user_id, " already allocated ", length(set)-length(items_needed), " items (of ", length(set), ").")
warning(warning_string)
}
for (document_id in items_needed){
assign_article_to_user(con,
document_id=document_id,
user_id=user_id,
allocation_date=as.character(Sys.Date()),
allocation_type=allocation_type,
allocated_by=allocated_by,
status=status)
}
"completed"
}
assign_trainingset_to_user(con, 3)
assign_set <- function(con, user_id, set, allocation_type, allocated_by = "assign_set", status="NEW"){
#' Assigns a whole set of articles to a user (articles which are already allocated to a user are not allocated again).
#' @param con The connection to the election violence database.
#' @param user_id The user id.
#' @param set A vector which contains the document ids of the articles to be allocated (generally the test set of articles and the training set of articles).
#' @param allocation_type The type of the allocation in the database (one of testing, training, coding, checking and ideal)
#' @param allocated_by The person (user_id) or the function which performed the allocation
# restrict assignment of set to items not already allocated to the user
items_needed <- user_allocated_fromset(con, user_id, set=set, not_allocated = TRUE)
for (document_id in items_needed){
assign_article_to_user(con,
document_id=document_id,
user_id=user_id,
allocation_date=as.character(Sys.Date()),
allocation_type=allocation_type,
allocated_by=allocated_by,
status=status)
}
completion_string <- paste0(allocated_by, " allocated ", length(items_needed), " items to user ", user_id)
if(length(items_needed)<length(set)){
completion_string<-paste0(completion_string, length(set)-length(items_needed), " items (of ", length(set), ") were already allocated ")
}
completion_string
}
assign_testset_to_user(con, 3)
assign_trainingset_to_user(con, 3)
assign_set <- function(con, user_id, set, allocation_type, allocated_by = "assign_set", status="NEW"){
#' Assigns a whole set of articles to a user (articles which are already allocated to a user are not allocated again).
#' @param con The connection to the election violence database.
#' @param user_id The user id.
#' @param set A vector which contains the document ids of the articles to be allocated (generally the test set of articles and the training set of articles).
#' @param allocation_type The type of the allocation in the database (one of testing, training, coding, checking and ideal)
#' @param allocated_by The person (user_id) or the function which performed the allocation
# restrict assignment of set to items not already allocated to the user
items_needed <- user_allocated_fromset(con, user_id, set=set, not_allocated = TRUE)
for (document_id in items_needed){
assign_article_to_user(con,
document_id=document_id,
user_id=user_id,
allocation_date=as.character(Sys.Date()),
allocation_type=allocation_type,
allocated_by=allocated_by,
status=status)
}
completion_string <- paste0(allocated_by, " allocated ", length(items_needed), " items to user ", user_id, ".")
if(length(items_needed)<length(set)){
completion_string<-paste0(completion_string, " ", length(set)-length(items_needed), " items (of ", length(set), ") were already allocated ")
}
completion_string
}
assign_testset_to_user(con, 3)
assign_trainingset_to_user(con, 3)
assign_initalsets_to_user <- function(con, user_id){
#' Assigns the training set and test sets to user (articles which are already allocated to a user are not allocated again).
#' @param con The connection to the election violence database.
#' @param user_id The user id.
#'
assign_trainingset_to_user(con, user_id)
assign_testset_to_user(con, user_id)
}
assign_initalsets_to_user(con, 3)
con<-evdb_connect(password_method = "config")
assign_initalsets_to_user(con, 3)
assign_initalsets_to_user <- function(con, user_id){
#' Assigns the training set and test sets to user (articles which are already allocated to a user are not allocated again).
#' @param con The connection to the election violence database.
#' @param user_id The user id.
#'
print(assign_testset_to_user(con, user_id))
print(assign_trainingset_to_user(con, user_id))
}
assign_initalsets_to_user(con, 3)
library(durhamevp)
get_allocation(con, 7)
con<-evdb_connect(password_method = "config")
get_allocation(con, 7)
assign_initalsets_to_user(con, 7)
get_allocation(con, 7)
assign_initalsets_to_user(con, 1:18)
1:18
assign_initalsets_to_user(con, c(1:18))
assign_initalsets_to_user(con, c(1))
this_sql <- "DELETE FROM portal_userdocumentallocation WHERE allocated_by='assign_testset_to_user' AND user_id=1 ;"
dbSendStatement(con, this_sql)
this_sql <- "DELETE FROM portal_userdocumentallocation WHERE allocated_by='assign_trainingset_to_user' AND user_id=1 ;"
dbSendStatement(con, this_sql)
assign_initalsets_to_user(con, c(2, 3))
assign_initalsets_to_users(con, c(2, 3))
assign_initalsets_to_users(con, c(1:18))
get_allocation(con, 1)
this_sql <- "DELETE FROM portal_userdocumentallocation WHERE allocated_by='assign_testset_to_user' AND user_id=1 ;"
dbSendStatement(con, this_sql)
get_allocation(con, 1)
this_sql <- "DELETE FROM portal_userdocumentallocation WHERE allocated_by='assign_trainingset_to_user' AND user_id=1 ;"
dbSendStatement(con, this_sql)
get_allocation(con, 1)
library(durhamevp)
get_user(con, 6)
con<-evdb_connect(password_method = "config")
get_user(con, 6)
this_sql <- "UPDATE portal_userdocumentallocation SET allocation_type='ideal' WHERE user_id=6 ;"
dbSendStatement(con, this_sql)
con<-evdb_connect(password_method = "config")
this_sql <- "UPDATE portal_userdocumentallocation SET allocation_type='testing' WHERE user_id=6 ;"
dbSendStatement(con, this_sql)
this_sql <- "UPDATE portal_userdocumentallocation SET allocation_type='training' WHERE user_id=6 ;"
dbSendStatement(con, this_sql)
file.exists("~/.ssh/id_rsa.pub")
